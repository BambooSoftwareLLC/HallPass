name: DOTNET

on: [push]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/dotnet/HallPass
    steps:
      - uses: actions/checkout@v3

      - run: dotnet restore
      - run: dotnet build -c Release
      - run: dotnet test --no-build


  get_version:
    runs-on: ubuntu-latest
    if: contains(github.ref, '/master')
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: get version from csproj
        uses: kzrnm/get-net-sdk-project-versions-action@v1.1.1
        id: get-version
        with:
          proj-path: src/dotnet/HallPass/HallPass/HallPass.csproj

      - name: get latest published version
        id: get-published-version
        shell: pwsh
        run: |
          $matches = nuget list HallPass | Select-String "HallPass (.*)"
          $publishedVersion = $matches[0].matches.groups[1].value
          echo "::set-output name=published-version::$publishedVersion"

      - name: print versions
        run: |
          echo "PROJECT VERSION: ${{steps.get-version.outputs.version}}"
          echo "PUBLISHED VERSION: ${{steps.get-published-version.outputs.published-version}}"

      - name: update version if already published
        id: update-version
        if: ${{ steps.get-version.outputs.version == steps.get-published-version.outputs.published-version }}
        uses: vers-one/dotnet-project-version-updater@v1.0
        with:
          file: src/dotnet/HallPass/HallPass/HallPass.csproj
          version: bump-build

      - name: update git with updated version
        if: ${{ steps.get-version.outputs.version == steps.get-published-version.outputs.published-version }}
        uses: stefanzweifel/git-auto-commit-action@v4

      - name: exit early after updating version in git
        if: ${{ steps.get-version.outputs.version == steps.get-published-version.outputs.published-version }}
        run: exit 1


  pack_and_publish:
    runs-on: ubuntu-latest
    needs: [build_and_test, get_version]
    if: contains(github.ref, '/master')
    steps:
      - name: download version artifact
        run: echo "not implemented"
      
      - name: download build artifact
        run: echo "not implemented"

      - name: create nuget package
        run: echo "not implemented"

      - name: publish package
        run: echo "not implemented"
